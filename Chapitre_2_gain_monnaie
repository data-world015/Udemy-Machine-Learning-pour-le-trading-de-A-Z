def gain_monnaie(y_h,y_test, y_pred, montant_initial=1000, seuil_hausse=0.5, seuil_baisse=-0.5, effet_de_levier=1):
    import numpy as np
    taille_y = len(y_test)
    Tx_croissance_y = np.zeros(taille_y).reshape(taille_y,1)
    y_test = np.reshape(y_test,(taille_y,1))
    
    for i in range(0,taille_y-1):
        Tx_croissance_y[i][0]=(y_test[i][0]-y_h[i][0])/y_h[i][0]*100
       
        
        
    ##### Boucle de classification
    
    ##### Initialisation des variables
    y_class = np.zeros(taille_y).reshape(taille_y,1)
    
    ##### Mise en place de la boucle de classification
    for i in range(0,taille_y-1):
        if Tx_croissance_y[i][0]>seuil_hausse:
            y_class[i][0]=1 
        elif Tx_croissance_y[i][0]<seuil_baisse:
            y_class[i][0]=2
        else:
            y_class[i][0]=0
    


##### tx et classification de y_pred
    taille_y_pred = len(y_pred)
    Tx_croissance_y_pred = np.zeros(taille_y_pred).reshape(taille_y_pred,1)
    y_pred = np.reshape(y_pred,(taille_y_pred,1))
    
   
    for i in range(0,taille_y_pred-1):
        Tx_croissance_y_pred[i][0]=(y_pred[i][0]-y_h[i][0])/y_h[i][0]*100
        
    ##### Boucle de classification
    
    ##### Initialisation des variables
    y_class_pred = np.zeros(taille_y_pred).reshape(taille_y_pred,1)
    
    ##### Mise en place de la boucle de classification
    for i in range(0,taille_y_pred-1):
        if Tx_croissance_y_pred[i][0]>seuil_hausse:
            y_class_pred[i][0]=1 
        elif Tx_croissance_y_pred[i][0]<seuil_baisse:
            y_class_pred[i][0]=2
        else:
            y_class_pred[i][0]=0


##### Mise en place des counts
    taille_y_class_pred = len(y_class_pred)
    count_hausse = 0
    count_baisse = 0
    
    ##### Mise en place de la boucle
    for i in range(0,taille_y_pred-1):
        if y_class_pred[i][0]==1:
            count_hausse = count_hausse + 1
        elif y_class_pred[i][0]==2:
            count_baisse = count_baisse + 1
      
        
##### Mesure des gains du modele
    
    ###### Mise en place des variables
    gain_hausse = np.zeros(taille_y_class_pred).reshape(taille_y_class_pred,1)
    gain_baisse = np.zeros(taille_y_class_pred).reshape(taille_y_class_pred,1)
    gain_total = np.zeros(taille_y_class_pred).reshape(taille_y_class_pred,1)

    
    ###### Mise en place du calcul des gains
    for i in range(0,taille_y_pred-1):
        if y_class_pred[i][0]==1:
            gain_hausse[i][0]=Tx_croissance_y[i][0]
            gain_total[i][0]=Tx_croissance_y[i][0]
        elif y_class_pred[i][0]==2:
            gain_baisse[i][0]=-Tx_croissance_y[i][0]
            gain_total[i][0]=-Tx_croissance_y[i][0]
            
    
##### Somme des gains hausses, baisses et totaux
    
    ##### Mise en place des variables
    Somme_gain_hausse = 0
    Somme_gain_baisse = 0
    
    
    ##### Mise en place de la boucle
    for i in range(0,taille_y_pred-1):
        Somme_gain_hausse = Somme_gain_hausse + gain_hausse[i][0]
        Somme_gain_baisse = Somme_gain_baisse + gain_baisse[i][0]
    
    Somme_gain_total = Somme_gain_hausse + Somme_gain_baisse
  
##### Count des trades juste
    #### Initialisation des variables
    count_hausse_juste = 0
    count_baisse_juste = 0
    
    #### Mise en place du compteur
    for i in range(0,taille_y_pred-1):
        if gain_hausse[i][0]>0:
            count_hausse_juste = count_hausse_juste + 1
        if gain_baisse[i][0]>0:
            count_baisse_juste = count_baisse_juste + 1
        
##### Calcul des ratios de fin
    count_trade_juste = count_hausse_juste + count_baisse_juste
    count_trade = count_hausse + count_baisse
    ratio_gain_jour_trade = Somme_gain_total/count_trade
    ratio_trade_juste = count_trade_juste/count_trade

##### Calcul gain perte max
    ##### Hausse
    gain_max_hausse = np.max(gain_hausse, axis=0)
    gain_min_hausse = np.min(gain_hausse, axis=0)
    
    ##### Baisse
    gain_max_baisse = np.max(gain_baisse, axis=0)
    gain_min_baisse = np.min(gain_baisse, axis=0)
    
    coef = 1      
        
    montant = np.zeros(taille_y_class_pred).reshape(taille_y_class_pred,1)
        
    montant_final = montant_initial
     
    for i in range(taille_y-1):
        montant_final = montant_final * (1 + effet_de_levier * gain_total[i][0]/100)
        coef = coef * (1 + effet_de_levier * gain_total[i][0]/100) 
        montant[i][0] = (coef-1) * 100
        
    pourcent = (coef - 1)*100
    montant = np.delete(montant, (len(montant)-1),axis =0)
    
    montant_final = round(montant_final,2)
    pourcent = round(pourcent,2)
    
    import matplotlib.pyplot as plt
    plt.plot(montant, color='green', label="Montant disponible")
    plt.title("Evolution du budget")
    plt.legend()
    plt.show
    
    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    montant_ = sc.fit_transform(montant)
    y_testt = sc.fit_transform(y_test)
    
    ecart_type_gain = np.std(gain_total, axis =0)
    plt.plot(y_testt, color='gray')
    plt.show()
    
    print('seuil hausse' '=',seuil_hausse)
    print('seuil baisse''=',seuil_baisse)
    print('count hausse''=',count_hausse)
    print('count baisse''=',count_baisse)
    print('count trade pris''=',count_trade)
    print('count hausse juste''=',count_hausse_juste)
    print('count baisse juste''=',count_baisse_juste)
    print('Somme des gains a la hausse''=',Somme_gain_hausse)
    print('Somme des gains a la baisse''=',Somme_gain_baisse)
    print('Somme des gains''=',Somme_gain_total)
    print('count trade juste''=',count_trade_juste)
    print('Ratio des gains par jour trade' '=',ratio_gain_jour_trade)
    print('gain max a la hausse''=',gain_max_hausse)
    print('gain min a la hausse''=',gain_min_hausse)
    print('gain max a la baisse''=',gain_max_baisse)
    print('gain min a la baisse''=',gain_min_baisse)
    print('Votre budget est de',montant_final,"â‚¬",'soit un gain en pourcentage de', pourcent, "%")
    print("ecart type gain", ecart_type_gain)
