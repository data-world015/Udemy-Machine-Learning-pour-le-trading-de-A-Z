import numpy as np
import itertools
import gym
from gym import spaces
from gym.utils import seeding



class env_financier(gym.Env):
  
  def __init__(self, data_train, invest_ini=20000):
    self.train_data = np.around(data_train) # round up to integer to reduce state space
    self.nb_pf, self.n_jour = self.train_data.shape

    self.invest_ini = invest_ini
    self.curseur = None
    self.position_prise = None
    self.prix_position = None
    self.budget_disp = None

    self.espace_action = spaces.Discrete(3**self.nb_pf)

    variation_max_prix = self.train_data.max(axis=1)
    variation_actif = [[0, invest_ini * 2 // h] for h in variation_max_prix]
    variation_prix = [[0, h] for h in variation_max_prix]
    variation_budget_disp = [[0, invest_ini * 2]]
    self.espace_observation = spaces.MultiDiscrete(variation_actif + variation_prix + variation_budget_disp)

    
    self._seed()
    self._reset()


  def _seed(self, seed=None):
    self.np_random, seed = seeding.np_random(seed)
    return [seed]

  def _observation(self):
    obs = []
    obs.extend(self.position_prise)
    obs.extend(list(self.prix_position))
    obs.append(self.budget_disp)
    return obs

  def _reset(self):
    self.curseur = 0
    self.position_prise = [0] * self.nb_pf
    self.prix_position = self.train_data[:, self.curseur]
    self.budget_disp = self.invest_ini
    return self._observation()


  def _valeur(self):
    return np.sum(self.position_prise * self.prix_position) + self.budget_disp



  def _etape(self, action):
    assert self.espace_action.contains(action)
    val_precedente = self._valeur()
    self.curseur += 1
    self.prix_position = self.train_data[:, self.curseur] # update price
    self._trade(action)
    valeur_curseur = self._valeur()
    recompense = 50 * (valeur_curseur - val_precedente)
    done = self.curseur == self.n_jour - 1
    info = {'valeur_actuelle': valeur_curseur}
    return self._observation(), recompense, done, info


  
  def _trade(self, action):
    action_combo = list(map(list, itertools.product([0, 1, 2], repeat=self.nb_pf)))
    action_vec = action_combo[action]

    sell_index = []
    buy_index = []
    for i, a in enumerate(action_vec):
      if a == 0:
        sell_index.append(i)
      elif a == 2:
        buy_index.append(i)

    if sell_index:
      for i in sell_index:
        self.budget_disp += self.prix_position[i] * self.position_prise[i]
        self.position_prise[i] = 0
    if buy_index:
      can_buy = True
      while can_buy:
        for i in buy_index:
          if self.budget_disp > self.prix_position[i]:
            self.position_prise[i] += 1 # buy one share
            self.budget_disp -= self.prix_position[i]
          else:
            can_buy = False
